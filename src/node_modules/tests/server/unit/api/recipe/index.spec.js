const proxyquire = require('proxyquire').noPreserveCache();

const recipeCtrlStub = {
  index: 'recipeCtrl.index',
  show: 'recipeCtrl.show',
  create: 'recipeCtrl.create',
  upsert: 'recipeCtrl.upsert',
  patch: 'recipeCtrl.patch',
  destroy: 'recipeCtrl.destroy',
};

const authServiceStub = {
  isAuthenticated() {
    return 'authService.isAuthenticated';
  },
  hasRole(role) {
    return `authService.hasRole.${role}`;
  },
};

const routerStub = {
  get: sinon.spy(),
  put: sinon.spy(),
  patch: sinon.spy(),
  post: sinon.spy(),
  delete: sinon.spy(),
};

// require the index with our stubbed out modules
const recipeIndex = proxyquire('server/api/recipe/index.js', {
  'express': {
    Router: () => routerStub,
  },
  './recipe.controller': {
    default: () => recipeCtrlStub,
  },
  '../../auth/auth.service': authServiceStub,
}).default;

describe('Recipe API Router:', () => {
  it('should return an express router instance', () => {
    recipeIndex.should.equal(routerStub);
  });

  describe('GET /api/recipes', () => {
    it('should route to recipe.controller.index', () => {
      routerStub.get
        .withArgs('/', 'authService.isAuthenticated', 'recipeCtrl.index')
        .should.have.been.calledOnce;
    });
  });

  describe('GET /api/recipes/:id', () => {
    it('should route to recipe.controller.show', () => {
      routerStub.get
        .withArgs('/:id', 'authService.isAuthenticated', 'recipeCtrl.show')
        .should.have.been.calledOnce;
    });
  });

  describe('POST /api/recipes', () => {
    it('should route to recipe.controller.create', () => {
      routerStub.post
        .withArgs('/', 'authService.isAuthenticated', 'recipeCtrl.create')
        .should.have.been.calledOnce;
    });
  });

  describe('PUT /api/recipes/:id', () => {
    it('should route to recipe.controller.upsert', () => {
      routerStub.put
        .withArgs('/:id', 'authService.isAuthenticated', 'recipeCtrl.upsert')
        .should.have.been.calledOnce;
    });
  });

  describe('PATCH /api/recipes/:id', () => {
    it('should route to recipe.controller.patch', () => {
      routerStub.patch
        .withArgs('/:id', 'authService.isAuthenticated', 'recipeCtrl.patch')
        .should.have.been.calledOnce;
    });
  });

  describe('DELETE /api/recipes/:id', () => {
    it('should route to recipe.controller.destroy', () => {
      routerStub.delete
        .withArgs('/:id', 'authService.isAuthenticated', 'recipeCtrl.destroy')
        .should.have.been.calledOnce;
    });
  });
});
