import app from 'server';
import request from 'supertest-as-promised';
import mongoose from 'mongoose';
import {tokenCookie} from 'tests/server/shared/setup/authenticate';

sharedExamplesFor('JSON response', (getResponse, status = 200) => {
  let subject = () => getResponse();

  it('responds with 200', () => {
    return subject().expect(status);
  });

  it('responds with JSON', () => {
    return subject().expect('Content-Type', /json/);
  });
});

sharedExamplesFor('API GET', ({url, getToken}) => {
  let token;
  let response = () =>
    request(app)
      .get(url)
      .set('Cookie', tokenCookie(token));

  before(() => {
    token = getToken();
  });

  itBehavesLike('JSON response', response);

  let subject = () => response().then(res => res.body);
  it('responds with array of entities', () => {
    return expect(subject()).to.eventually.be.instanceOf(Array);
  });
});

sharedExamplesFor('API POST', ({url, factoryName, getToken}) => {
  let data, token;
  let response = () =>
    request(app)
      .post(url)
      .set('Cookie', tokenCookie(token))
      .send(data);

  before(async() => {
    data = await FactoryGirl.attrs(factoryName);
    token = getToken();
  });

  itBehavesLike('JSON response', response, 201);

  let subject = () => response().then(res => res.body);
  it('should respond with the newly created entity', () => {
    return expect(subject()).to.eventually.include(data);
  });
});

sharedExamplesFor('API entity GET', ({url, factoryName, getToken}) => {
  let entity, token;
  let response = () =>
    request(app)
      .get(`${url}/${entity._id}`)
      .set('Cookie', tokenCookie(token));

  before(async() => {
    entity = await FactoryGirl.create(factoryName);
    token = getToken();
  });

  itBehavesLike('JSON response', response);

  let subject = () => response().then(res => res.body);
  it('should respond with the requested entity', () => {
    return expect(subject()).to.eventually.have.property('_id').equal(entity._id.toString());
  });
});

sharedExamplesFor('API PUT', ({url, factoryName, getToken}) => {
  let entity, token;
  let response = () =>
    request(app)
      .put(`${url}/${entity._id}`)
      .set('Cookie', tokenCookie(token));

  before(async() => {
    entity = await FactoryGirl.create(factoryName);
    token = getToken();

  });

  itBehavesLike('JSON response', response);

  let subject = () => response().then(res => res.body);
  it('should respond with the updated recipe', () => {
    return expect(subject()).to.eventually.have.property('_id').equal(entity._id.toString());
  });
});

sharedExamplesFor('API PATCH', ({url, factoryName, property, getToken}) => {
  let entity, token;
  let op = {op: 'replace', path: `/${property}`, value: '__test__'};
  let response = () =>
    request(app)
      .patch(`${url}/${entity._id}`)
      .set('Cookie', tokenCookie(token))
      .send([op]);

  before(async() => {
    entity = await FactoryGirl.create(factoryName);
    token = getToken();

  });

  itBehavesLike('JSON response', response);

  let subject = () => response().then(res => res.body);
  it('should respond with the updated recipe', () => {
    return expect(subject()).to.eventually.have.property(property).equal('__test__');
  });
});

sharedExamplesFor('API DELETE', ({url, factoryName, getToken}) => {
  let entityId, token;
  let response = () =>
    request(app)
      .delete(`${url}/${entityId}`)
      .set('Cookie', tokenCookie(token));

  before(() => {
    token = getToken();
  });

  context('when entity exists', () => {
    let entity;

    beforeEach(async() => {
      entity = await FactoryGirl.create(factoryName);
      entityId = entity._id;
    });

    itBehavesLike('JSON response', response);

    let subject = () => response().then(res => res.body);
    it('should respond with deleted entity', () => {
      return expect(subject()).to.eventually.have.property('_id').equal(entity._id.toString());
    });
  });

  context('when entity does not exits', () => {
    before(() => {
      entityId = new mongoose.Types.ObjectId();
    });

    let subject = response;
    it('should respond with 404', async() => {
      return subject().expect(404);
    });
  });
});
