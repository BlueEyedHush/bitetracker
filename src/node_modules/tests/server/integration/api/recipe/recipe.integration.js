'use strict';

import app from 'server';
import User from 'server/api/user/user.model';
import request from 'supertest-as-promised';
import mongoose from 'mongoose';

let newRecipe;

describe('Recipe API:', () => {
  let token;

  before(() => {
    const name = 'FakeUser';
    const email = 'test@example.com';
    const password = 'test';

    const user = new User({name, email, password});

    return user.saveAsync()
      .then(_ => {
        return request(app)
          .post('/auth/local')
          .set('Content-Type', 'application/json')
          .send({username: email, password, transportMethod: 'RES_BODY'})
          .then(res => {
            if (!res.body.accessToken) {
              throw new Error('Access token missing in respnse form local auth service');
            } else {
              token = res.body.accessToken;
            }
          });
      });
  });

  // Clear users after testing
  after(() => {
    return User.removeAsync();
  });

  function tokenCookie() {
    return `access_token=${token}`;
  }

  describe('GET /api/recipes', () => {
    let recipes;

    beforeEach(() => {
      return request(app)
        .get('/api/recipes')
        .set('Cookie', tokenCookie())
        .expect(200)
        .expect('Content-Type', /json/)
        .then(res => { recipes = res.body; });
    });

    it('should respond with JSON array', () => {
      recipes.should.be.instanceOf(Array);
    });
  });

  describe('POST /api/recipes', () => {
    beforeEach(() => {
      return request(app)
        .post('/api/recipes')
        .set('Cookie', tokenCookie())
        .send({
          title: 'New Recipe',
          body: 'This is the brand new recipe!!!',
        })
        .expect(201)
        .expect('Content-Type', /json/)
        .then(res => { newRecipe = res.body; });
    });

    it('should respond with the newly created recipe', () => {
      newRecipe.title.should.equal('New Recipe');
      newRecipe.body.should.equal('This is the brand new recipe!!!');
    });
  });

  describe('GET /api/recipes/:id', () => {
    let recipe;

    beforeEach(() => {
      return request(app)
        .get(`/api/recipes/${newRecipe._id}`)
        .set('Cookie', tokenCookie())
        .expect(200)
        .expect('Content-Type', /json/)
        .then(res => { recipe = res.body; });
    });

    it('should respond with the requested recipe', () => {
      recipe.title.should.equal('New Recipe');
      recipe.body.should.equal('This is the brand new recipe!!!');
    });
  });

  describe('PUT /api/recipes/:id', () => {
    let updatedRecipe;

    beforeEach(() => {
      return request(app)
        .put(`/api/recipes/${newRecipe._id}`)
        .set('Cookie', tokenCookie())
        .send({
          title: 'Updated Recipe',
          body: 'This is the updated recipe!!!',
        })
        .expect(200)
        .expect('Content-Type', /json/)
        .then(res => { updatedRecipe = res.body; });
    });

    afterEach(() => {
      updatedRecipe = {};
    });

    it('should respond with the updated recipe', () => {
      updatedRecipe.title.should.equal('Updated Recipe');
      updatedRecipe.body.should.equal('This is the updated recipe!!!');
    });
  });

  describe('PATCH /api/grocery_lists/:id', () => {
    let patchedRecipe;

    beforeEach(() => {
      return request(app)
        .patch(`/api/recipes/${newRecipe._id}`)
        .set('Cookie', tokenCookie())
        .send([
          {op: 'replace', path: '/title', value: 'Patched Recipe'},
        ])
        .expect(200)
        .expect('Content-Type', /json/)
        .then(res => { patchedRecipe = res.body; });
    });

    afterEach(() => {
      patchedRecipe = {};
    });

    it('should respond with the patched recipe', () => {
      patchedRecipe.title.should.equal('Patched Recipe');
    });
  });

  describe('DELETE /api/recipes/:id', () => {
    context('when recipe exists', () => {
      let recipe;
      let deletedRecipe;

      beforeEach(() => {
        return request(app)
          .post('/api/recipes')
          .set('Cookie', tokenCookie())
          .send({
            title: 'New Recipe',
          })
          .expect(201)
          .then(res => { recipe = res.body; })
          .then(() =>
            request(app)
              .delete(`/api/recipes/${recipe._id}`)
              .set('Cookie', tokenCookie())
              .expect(200)
              .expect('Content-Type', /json/)
              .then(res => { deletedRecipe = res.body; })
          );
      });

      afterEach(() => {
        recipe = {};
        deletedRecipe = {};
      });

      it('should respond with deleted recipe', () => {
        deletedRecipe.should.deep.equal(recipe);
      });
    });

    context('when recipe does not exits', () => {
      it('should respond with 404', () => {
        return request(app)
          .delete(`/api/recipes/${new mongoose.Types.ObjectId()}`)
          .set('Cookie', tokenCookie())
          .expect(404);
      });
    });
  });
});
