'use strict';

import app from 'server';
import User from 'server/api/user/user.model';
import request from 'supertest-as-promised';
import mongoose from 'mongoose';
import {authenticate} from 'tests/server/shared/setup/authenticate';
require('tests/server/shared/behaviors/api');

let newRecipe;

describe('Recipe API:', () => {
  let token;
  before(async () => {
    return token = await authenticate();
  });

  describe('GET /api/recipes', () => {
    itBehavesLike('API GET', '/api/recipes', () => token);
  });

  describe('POST /api/recipes', () => {
    itBehavesLike('API POST', '/api/recipes', 'recipe', () => token);
  });

  describe('GET /api/recipes/:id', () => {
    itBehavesLike('API entity GET', '/api/recipes', 'recipe', () => token);
  });

  describe('PATCH /api/grocery_lists/:id', () => {
    let patchedRecipe;

    beforeEach(() => {
      return request(app)
        .patch(`/api/recipes/${newRecipe._id}`)
        .set('Cookie', tokenCookie())
        .send([
          {op: 'replace', path: '/title', value: 'Patched Recipe'},
        ])
        .expect(200)
        .expect('Content-Type', /json/)
        .then(res => { patchedRecipe = res.body; });
    });

    afterEach(() => {
      patchedRecipe = {};
    });

    it('should respond with the patched recipe', () => {
      patchedRecipe.title.should.equal('Patched Recipe');
    });
  });

  describe('DELETE /api/recipes/:id', () => {
    context('when recipe exists', () => {
      let recipe;
      let deletedRecipe;

      beforeEach(() => {
        return request(app)
          .post('/api/recipes')
          .set('Cookie', tokenCookie())
          .send({
            title: 'New Recipe',
          })
          .expect(201)
          .then(res => { recipe = res.body; })
          .then(() =>
            request(app)
              .delete(`/api/recipes/${recipe._id}`)
              .set('Cookie', tokenCookie())
              .expect(200)
              .expect('Content-Type', /json/)
              .then(res => { deletedRecipe = res.body; })
          );
      });

      afterEach(() => {
        recipe = {};
        deletedRecipe = {};
      });

      it('should respond with deleted recipe', () => {
        deletedRecipe.should.deep.equal(recipe);
      });
    });

    context('when recipe does not exits', () => {
      it('should respond with 404', () => {
        return request(app)
          .delete(`/api/recipes/${new mongoose.Types.ObjectId()}`)
          .set('Cookie', tokenCookie())
          .expect(404);
      });
    });
  });
});
