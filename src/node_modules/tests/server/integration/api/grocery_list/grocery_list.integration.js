'use strict';

import app from 'server';
import request from 'supertest';

var newGroceryList;

describe('GroceryList API:', function() {
  describe('GET /api/grocery_lists', function() {
    var groceryLists;

    beforeEach(function(done) {
      request(app)
        .get('/api/grocery_lists')
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if(err) {
            return done(err);
          }
          groceryLists = res.body;
          done();
        });
    });

    it('should respond with JSON array', function() {
      groceryLists.should.be.instanceOf(Array);
    });
  });

  describe('POST /api/grocery_lists', function() {
    beforeEach(function(done) {
      request(app)
        .post('/api/grocery_lists')
        .send({
          title: 'New GroceryList'
        })
        .expect(201)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if(err) {
            return done(err);
          }
          newGroceryList = res.body;
          done();
        });
    });

    it('should respond with the newly created groceryList', function() {
      newGroceryList.title.should.equal('New GroceryList');
      newGroceryList.items.should.be.instanceOf(Array);
      newGroceryList.items.should.eql([]);
    });
  });

  describe('GET /api/grocery_lists/:id', function() {
    var groceryList;

    beforeEach(function(done) {
      request(app)
        .get(`/api/grocery_lists/${newGroceryList._id}`)
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if(err) {
            return done(err);
          }
          groceryList = res.body;
          done();
        });
    });

    afterEach(function() {
      groceryList = {};
    });

    it('should respond with the requested groceryList', function() {
      groceryList.title.should.equal('New GroceryList');
    });
  });

  describe('PUT /api/grocery_lists/:id', function() {
    var updatedGroceryList;

    beforeEach(function(done) {
      request(app)
        .put(`/api/grocery_lists/${newGroceryList._id}`)
        .send({
          title: 'Updated GroceryList'
        })
        .expect(200)
        .expect('Content-Type', /json/)
        .end(function(err, res) {
          if(err) {
            return done(err);
          }
          updatedGroceryList = res.body;
          done();
        });
    });

    afterEach(function() {
      updatedGroceryList = {};
    });

    it('should respond with the original groceryList', function() {
      updatedGroceryList.title.should.equal('New GroceryList');
    });

    it('should respond with the updated groceryList on a subsequent GET', function(done) {
      request(app)
        .get(`/api/grocery_lists/${newGroceryList._id}`)
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if(err) {
            return done(err);
          }
          let groceryList = res.body;

          groceryList.title.should.equal('Updated GroceryList');

          done();
        });
    });
  });

  describe('PATCH /api/grocery_lists/:id', function() {
    var patchedGroceryList;

    beforeEach(function(done) {
      request(app)
        .patch(`/api/grocery_lists/${newGroceryList._id}`)
        .send([
          { op: 'replace', path: '/title', value: 'Patched GroceryList' }
        ])
        .expect(200)
        .expect('Content-Type', /json/)
        .end(function(err, res) {
          if(err) {
            return done(err);
          }
          patchedGroceryList = res.body;
          done();
        });
    });

    afterEach(function() {
      patchedGroceryList = {};
    });

    it('should respond with the patched groceryList', function() {
      patchedGroceryList.title.should.equal('Patched GroceryList');
    });
  });

  describe('DELETE /api/grocery_lists/:id', function() {
    it('should respond with 204 on successful removal', function(done) {
      request(app)
        .delete(`/api/grocery_lists/${newGroceryList._id}`)
        .expect(204)
        .end(err => {
          if(err) {
            return done(err);
          }
          done();
        });
    });

    it('should respond with 404 when groceryList does not exist', function(done) {
      request(app)
        .delete(`/api/grocery_lists/${newGroceryList._id}`)
        .expect(404)
        .end(err => {
          if(err) {
            return done(err);
          }
          done();
        });
    });
  });
});
