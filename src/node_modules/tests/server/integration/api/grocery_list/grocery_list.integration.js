'use strict';

import app from 'server';
import User from 'server/api/user/user.model';
import request from 'supertest';

let newGroceryList;

describe('GroceryList API:', () => {
  let token;

  before((done) => {
    const name = 'FakeUser';
    const email = 'test@example.com';
    const password = 'test';

    const user = new User({name, email, password});

    return user.saveAsync()
      .then(_ => {
        request(app)
          .post('/auth/local')
          .set('Content-Type', 'application/json')
          .send({username: email, password, transportMethod: 'RES_BODY'})
          .end((err, res) => {
            if (err) {
              return done(err);
            }
            if(!res.body.accessToken) {
              throw new Error('Access token missing in respnse form local auth service');
            } else {
              token = res.body.accessToken;
            }
            return done();
          });
      });
  });

  after(() => {
    return User.removeAsync();
  });

  function tokenCookie() {
    return `access_token=${token}`;
  }

  describe('GET /api/grocery_lists', () => {
    let groceryLists;

    beforeEach((done) => {
      request(app)
        .get('/api/grocery_lists')
        .set('Cookie', tokenCookie())
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) {
            return done(err);
          }
          groceryLists = res.body;
          return done();
        });
    });

    it('should respond with JSON array', () => {
      groceryLists.should.be.instanceOf(Array);
    });
  });

  describe('POST /api/grocery_lists', () => {
    beforeEach((done) => {
      request(app)
        .post('/api/grocery_lists')
        .set('Cookie', tokenCookie())
        .send({
          title: 'New GroceryList',
        })
        .expect(201)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) {
            return done(err);
          }
          newGroceryList = res.body;
          return done();
        });
    });

    it('should respond with the newly created groceryList', () => {
      newGroceryList.title.should.equal('New GroceryList');
      newGroceryList.items.should.be.instanceOf(Array);
      newGroceryList.items.should.eql([]);
    });
  });

  describe('GET /api/grocery_lists/:id', () => {
    let groceryList;

    beforeEach((done) => {
      request(app)
        .get(`/api/grocery_lists/${newGroceryList._id}`)
        .set('Cookie', tokenCookie())
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) {
            return done(err);
          }
          groceryList = res.body;
          return done();
        });
    });

    afterEach(() => {
      groceryList = {};
    });

    it('should respond with the requested groceryList', () => {
      groceryList.title.should.equal('New GroceryList');
    });
  });

  describe('PUT /api/grocery_lists/:id', () => {
    let updatedGroceryList;

    beforeEach((done) => {
      request(app)
        .put(`/api/grocery_lists/${newGroceryList._id}`)
        .set('Cookie', tokenCookie())
        .send({
          title: 'Updated GroceryList',
        })
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) {
            return done(err);
          }
          updatedGroceryList = res.body;
          return done();
        });
    });

    afterEach(() => {
      updatedGroceryList = {};
    });

    it('should respond with the original groceryList', () => {
      updatedGroceryList.title.should.equal('New GroceryList');
    });

    it('should respond with the updated groceryList on a subsequent GET', (done) => {
      request(app)
        .get(`/api/grocery_lists/${newGroceryList._id}`)
        .set('Cookie', tokenCookie())
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) {
            return done(err);
          }
          const groceryList = res.body;

          groceryList.title.should.equal('Updated GroceryList');

          return done();
        });
    });
  });

  describe('PATCH /api/grocery_lists/:id', () => {
    let patchedGroceryList;

    beforeEach((done) => {
      request(app)
        .patch(`/api/grocery_lists/${newGroceryList._id}`)
        .set('Cookie', tokenCookie())
        .send([
          {op: 'replace', path: '/title', value: 'Patched GroceryList'},
        ])
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) {
            return done(err);
          }
          patchedGroceryList = res.body;
          return done();
        });
    });

    afterEach(() => {
      patchedGroceryList = {};
    });

    it('should respond with the patched groceryList', () => {
      patchedGroceryList.title.should.equal('Patched GroceryList');
    });
  });

  describe('DELETE /api/grocery_lists/:id', () => {
    let groceryList;

    beforeEach((done) => {
      request(app)
        .post('/api/grocery_lists')
        .set('Cookie', tokenCookie())
        .send({
          title: 'New GroceryList',
        })
        .end((err, res) => {
          if (err) {
            return done(err);
          }
          groceryList = res.body;
          return done();
        });
    });

    it('should respond with removed groceryList on successful removal', (done) => {
      request(app)
        .delete(`/api/grocery_lists/${groceryList._id}`)
        .set('Cookie', tokenCookie())
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if (err) {
            return done(err);
          }
          const removedGroceryList = res.body;

          removedGroceryList.should.eql(groceryList);
          return done();
        });
    });

    it('should respond with 404 when groceryList does not exist', (done) => {
      request(app)
        .delete('/api/grocery_lists/580544a39180629f55a08e3e')
        .set('Cookie', tokenCookie())
        .expect(404)
        .end((err) => {
          if (err) {
            return done(err);
          }
          return done();
        });
    });
  });
});
