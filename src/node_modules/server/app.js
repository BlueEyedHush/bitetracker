/**
 * Main application file
 */

'use strict';

import logger from 'winston'
import express from 'express';
import mongoose from 'mongoose';
import http from 'http';
import config from './config/environment';
import expressInitializer from './config/express';
import routesInitializer from './routes';
import * as db from 'server/db/db';
mongoose.Promise = require('bluebird');

export function createGlobalAppInstance() {
  if (!GLOBAL.bitetrackerApp) {
    GLOBAL.bitetrackerApp = createApp();
  } else {
    throw new Error('Application has already been initialized!');
  }
}

/**
 *
 * @returns Promise, which resolves to application object
 */
export function getApp() {
  if(!GLOBAL.bitetrackerApp) {
    throw new Error('Application has not yet been initialized!');
  } else {
    return GLOBAL.bitetrackerApp
  }
}

export function terminateApp() {
  getApp()
    .then(() => logger.info('Application closed successfully'))
    .catch(() => logger.error(`Error occured when closing application: ${e.stack}`))
    .then(() => process.exit(-1));
}

class App {
  constructor(database, expressHandler, httpServer) {
    this.database = database;
    this.expressHandler = expressHandler;
    this.httpServer = httpServer;
  }

  getDatabase() {return this.database}

  getExpressHandler() {return this.expressHandler}

  getHttpServer() {return this.httpServer}

  cleanUp() {
    return Promise.resolve()
      .then(() => {
        if(!this.httpServer) this.httpServer.close();
      })
      .then(() => mongoose.disconnect())
      .then(() => {
        if(!this.database) db.disconnect(this.database);
      });
  }
}

function createApp() {
  logger.info('Starting application');

  return db.connect()
    .then((db) => {
      // For mongoose, to be removed
      mongoose.connect(config.mongo.uri, config.mongo.options);
      mongoose.connection.on('error', function (err) {
        logger.error('MongoDB connection error: ' + err);
        /* if error has been thrown here, nothing to close (yet) */
        process.exit(1);
      });

      return db;
    })
    .then((db) => {
      const expressHandler = express();
      const server = http.createServer(expressHandler);

      const app = new App(db, expressHandler, server);
      
      // Populate databases with sample data
      if(config.seedDB) {
        require('./config/seed');
      }

      expressInitializer(expressHandler);
      routesInitializer(expressHandler, db);

      return new Promise((resolve, reject) => {
        // Start server
        server.listen(config.port, config.ip, function() {
          logger.info('Express server listening on %d, in %s mode', config.port, expressHandler.get('env'));
          resolve(app);
        });
      });
    })
    .then((_) => {
      registerEmergencyHandlers();
      logger.info('Application started successfully');
      return _;
    })
    .catch(e => {
      logger.error(`Uncaught error: ${e.stack}`);
      mongoose.disconnect();
    });
}

function registerEmergencyHandlers() {
  process.on('SIGHUP',  () => {logger.warn('[SIGHUP]');  terminateApp();});
  process.on('SIGINT',  () => {logger.warn('[SIGINT]');  terminateApp();});
  process.on('SIGQUIT', () => {logger.warn('[SIGQUIT]'); terminateApp();});
  process.on('SIGABRT', () => {logger.warn('[SIGABRT]'); terminateApp();});
  process.on('SIGTERM', () => {logger.warn('[SIGTERM]'); terminateApp();});

  /* for nodemon */
  process.on('SIGUSR2', () => {logger.warn('[SIGUSR2]'); terminateApp();});

  process.on('uncaughtException', (err) =>  {
    logger.error(`Uncaught exception: ${err.stack}`);
    terminateApp();
  });
}
