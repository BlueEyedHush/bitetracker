/**
 * Express configuration
 */

'use strict';

import express from 'express';
import favicon from 'serve-favicon';
import morgan from 'morgan';
import compression from 'compression';
import bodyParser from 'body-parser';
import methodOverride from 'method-override';
import cookieParser from 'cookie-parser';
import errorHandler from 'errorhandler';
import path from 'path';
import lusca from 'lusca';
import config from './environment';
import passport from 'passport';
import session from 'express-session';
import connectMongo from 'connect-mongo';
import mongoose from 'mongoose';
import logger from 'winston';

const MongoStore = connectMongo(session);

export default function(app) {
  const env = app.get('env');

  app.set('views', `${config.root}/views`);
  app.set('view engine', 'jade');
  app.use(compression());
  app.use(bodyParser.urlencoded({extended: false}));
  app.use(bodyParser.json());
  app.use(methodOverride());
  app.use(cookieParser());
  app.use(passport.initialize());

  // Persist sessions with MongoStore / sequelizeStore
  // We need to enable sessions for passport-twitter because it's an
  // oauth 1.0 strategy, and Lusca depends on sessions
  app.use(session({
    secret: config.secrets.session,
    saveUninitialized: true,
    resave: false,
    store: new MongoStore({
      mongooseConnection: mongoose.connection,
      db: 'food-diary',
    }),
  }));

  /**
   * Lusca - express server security
   * https://github.com/krakenjs/lusca
   */
  if(env !== 'test') {
    app.use(lusca({
      csrf: false,
      xframe: 'SAMEORIGIN',
      hsts: {
        maxAge: 31536000, // 1 year, in seconds
        includeSubDomains: true,
        preload: true,
      },
      xssProtection: true,
    }));
  }

  if(config.clientRoot != null) {
    app.use(express.static(config.clientRoot));
    // app.use(favicon(path.join(config.clientRoot, 'favicon.ico')));
  }

  if(env === 'development') {
    app.use(require('connect-livereload')());
  }

  app.use(morgan('dev'));

  // Error handlers - has to be last
  if(env === 'development') {
    app.use(errorHandler());
  } else if(env === 'test') {
    /* for some reason errorHandler doesn't work in test env, even with {log: true}, so have to provide
     * custom solution
     * which for some reason also doesn't work 
     * */
    app.use((err, req, res, next) => {
      logger.error(`${req.method} ${req.originalUrl} failed with: ${err.stack}`);
      res.status(500).send();
    });
  }
}
