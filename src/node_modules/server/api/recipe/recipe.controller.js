import {respondWithResult, patchUpdates, removeEntity, handleEntityNotFound, handleError} from 'server/api/common';
import Recipe from './recipe.model';

/**
 * GET     /api/recipes              ->  index
 * POST    /api/recipes              ->  create
 * GET     /api/recipes/:id          ->  show
 * PUT     /api/recipes/:id          ->  update
 * DELETE  /api/recipes/:id          ->  destroy
 */

// Gets a list of Recipes
export function index(req, res) {
  Recipe.findAsync({author: req.user._id})
    .then(respondWithResult(res))
    .catch(handleError(res));
}

// Gets a single Recipe from the DB
export function show(req, res) {
  /* @todo: check author */
  Recipe.findByIdAsync(req.params.id)
    .then(respondWithResult(res))
    .catch(handleError(res));
}

// Creates a new Recipe in the DB
export function create(req, res) {
  const recipe = req.body;
  recipe.author = req.user._id;
  Recipe.createAsync(recipe)
    .then(respondWithResult(res, 201))
    .catch(handleError(res));
}

// Updates an existing Recipe in the DB
export function upsert(req, res) {
  if (req.body._id) {
    delete req.body._id;
  }
  return Recipe
    .findOneAndUpdate({_id: req.params.id}, req.body, {
      upsert: true,
      new: true,
      setDefaultsOnInsert: true,
      runValidators: true
    })
    .exec()
    .then(respondWithResult(res))
    .catch(handleError(res));
}

// Updates an existing Recipe in the DB
export function patch(req, res) {
  if (req.body._id) {
    delete req.body._id;
  }
  return Recipe.findById(req.params.id).exec()
    .then(handleEntityNotFound(res))
    .then(patchUpdates(req.body))
    .then(respondWithResult(res))
    .catch(handleError(res));
}

// Deletes a Recipe from the DB
export function destroy(req, res) {
  console.log(req.params, req.body);
  Recipe.findByIdAsync(req.params.id)
    .then(handleEntityNotFound(res))
    .then(removeEntity(res))
    .then(respondWithResult(res))
    .catch(handleError(res));
}
