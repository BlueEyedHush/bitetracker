
import {send400} from 'server/api/utils';
import {prependException as prependEx} from 'shared/exceptions';

export default class GroceryListController {
  constructor(dao) {
    this.dao = dao;
  }

  getAll(req, res, next) {
    return this.dao.getAll()
      .then(a => res.status(200).json(a))
      .catch(e => {
        next(prependEx(e, '[RouteHandler] failure while retrieving all uncompleted lists'));
      });
  }

  createNew(req, res, next) {
    const list = req.body;
    return this.dao.insert(list)
      .then(valid => res.status(201).json(valid))
      .catch(e => {
        if(e.name === 'validation_error') {
          send400(res, e);
        } else {
          next(prependEx(e, '[RouteHandler] error while creating new list'));
        }
      });
  }

  getOne(req, res, next) {
    const id = req.params.listId;
    return this.dao.getOne(id)
      .then(doc => {
        res.status(200).json(doc);
      })
      .catch(e => {
        if(e.name === 'not_found') res.status(404).send();
        else next(prependEx(e, '[RouteHandler] error while retrieving the list'));
      });
  }

  update(req, res, next) {
    return this.dao.update(req.params.listId, req.body)
      .then(() => {
        res.status(204).send();
      })
      .catch(e => {
        if(e.name === 'validation_error') send400(res, e);
        else if(e.name === 'not_found') res.status(404).send();
        else next(prependEx(e, '[RouteHandler] error while trying to update the list'));
      })
      /* in case error occured in error handler this is simplest possible one */
      .catch(e => console.log(e));
  }

  remove(req, res) {
    return this.dao.remove(req.params.listId)
      .then(_ => res.status(204).send())
      .catch(e => {
        if(e.name == 'not_found') res.status(404).send();
        else next(prependEx(e, '[RouteHandler] error while trying to delete list'));
      });
  }
}
