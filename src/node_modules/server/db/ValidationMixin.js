
import Ajv from 'ajv';
import lodash from 'lodash';

import {createException as ex} from 'shared/exceptions';

export default (superclass) => class extends superclass {
  constructor(schema, ...rest) {
    super(...rest);

    if(schema.properties && schema.properties._id) {
      throw ex('invalid_argument', 'Schema cannot contain _id field');
    }

    const insertAjv = new Ajv({useDefaults: true, removeAdditional: true});
    this._insertValidator = insertAjv.compile(schema);

    const updateSchema = lodash.cloneDeep(schema);
    delete updateSchema.required;
    const updateAjv = new Ajv({removeAdditional: true});
    this._updateValidator = updateAjv.compile(updateSchema);
  }

  /**
   *
   * @param obj - object to ve validated
   * @returns validated object (e.g. with defaults filled)
   * @throws Error(name='validation_error')
   */
  validate(obj) {
    return this._getValidatedOrThrowOnInvalid(this._insertValidator, obj);
  }

  /**
   *
   * @param obj - object to ve validated
   * @returns validated object (e.g. with defaults filled)
   * @throws Error(name='validation_error')
   */
  validateUpdate(obj) {
    return this._getValidatedOrThrowOnInvalid(this._updateValidator, obj);
  }

  _getValidatedOrThrowOnInvalid(validator, input) {
    if(validator(input)) {
      return input;
    } else {
      throw ex('validation_error', validator.errorsText());
    }
  }
};
