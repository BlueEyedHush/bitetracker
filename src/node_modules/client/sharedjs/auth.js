import axios from 'axios';
import Cookies from 'js-cookie';
import {NEVER as NEVER_EXPIRE} from './cookies';
import {createException as ex} from './exceptions';

const LOCAL_AUTH_URL = '/auth/local';
const USERID_COOKIE_NAME = 'user';
const REDIRURL_COOKIE_NAME = 'redirUrl';

export const EX = {
  INCORRECT_CREDENTIALS: 'INCORRECT_CREDENTIALS',
  NETWORK: 'NETWORK',
  UNKNOWN: 'UNKNOWN',
};
/**
 * Attempts to contact login service.
 * Service is expected to return:
 *  200 with reponse {redirectUrl: <rootRelativeUrl>, userId: <>}, or
 *  403
 *
 * @param {String} username
 * @param {String} password - plaintest passowrd
 * @returns {Promise} resolve(response payload), reject(Error(reason for failure))
 * Error type (err.name):
 * * INCORRECT_CREDENTIALS
 * * NETWORK - communication with server wasn't successfull
 * * UNKNOWN - response was received, but authentication failed
 */
export function login(username, password) {
  return axios.post(LOCAL_AUTH_URL, {username, password}, {
    headers: {
      'Content-type': 'application/json',
      'Accept': 'application/json',
    },
  })
    .catch(e => {
      throw ex(EX.NETWORK, `Cannot contact server: ${e.message}`);
    })
    .then(response => {
      if (response.status === 200) {
        return response.data;
      } else if (response.status === 403) {
        throw ex(EX.INCORRECT_CREDENTIALS, response.status);
      } else {
        throw ex(EX.UNKNOWN, response.status);
      }
    })
    .then((json) => {
      if (!json.hasOwnProperty('userId') || !json.hasOwnProperty('redirectUrl')) {
        throw ex(EX.UNKNOWN, `malformed response payload: ${JSON.stringify(json)}`);
      } else {
        return json;
      }
    })
    .then((json) => {
      Cookies.set(USERID_COOKIE_NAME, json.userId, {expires: NEVER_EXPIRE});
      Cookies.set(REDIRURL_COOKIE_NAME, json.redirectUrl, {expires: NEVER_EXPIRE});

      return json;
    });
}

/**
 * Checks whether 'user' cookie is present and non-empty, returning either true or false
 */
export function isCookiePresent() {
  const cookie = Cookies.get(USERID_COOKIE_NAME);
  return cookie !== undefined && cookie !== '';
}

export function getCachedRedirectionUrl() {
  return Cookies.get(REDIRURL_COOKIE_NAME);
}
