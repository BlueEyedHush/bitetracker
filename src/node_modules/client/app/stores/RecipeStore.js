import {v4 as uuid} from 'node-uuid';
import flow from 'lodash/fp/flow';
import clone from 'lodash/clone';
import assign from 'lodash/assign';
import values from 'lodash/fp/values';
import set from 'lodash/fp/set';
import unset from 'lodash/fp/unset';
import omit from 'lodash/fp/omit';
import some from 'lodash/fp/some';
import RecipeActions from 'actions/RecipeActions';
import RecipeSource from 'sources/RecipeSource';
import {browserHistory} from 'react-router';
import alt from '../alt';

const createIngredient = () => ({_id: uuid()});

const mapIngredientsToList = ({recipe, ingredients}) => ({recipe: assign(
  {},
  recipe,
  {ingredients: values(ingredients)}
)});

const nonEmptyIngredient = flow(
  omit('_id'),
  values,
  some(value => value),
);

const stripIds = (ingredients) => ingredients.map(ingredient => omit('_id')(ingredient));
const stripEmptyIngredients = (ingredients) => ingredients.filter(nonEmptyIngredient);

class RecipeStore {
  static config = {
    getState(currentState) {
      return mapIngredientsToList(currentState);
    }
  };

  constructor() {
    this.recipe = {
      title: ''
    };
    this.ingredients = {};
    this.err = null;

    this.bindListeners({
      handleLoadRecipe: RecipeActions.LOAD_RECIPE,
      handleUpdateRecipe: RecipeActions.UPDATE_RECIPE,
      handleSubmitRecipe: RecipeActions.SUBMIT_RECIPE,
      handleSubmitSuccess: RecipeActions.SUBMIT_SUCCESS,
      handleSubmitFailure: RecipeActions.SUBMIT_FAILURE,
      handleAddIngredient: RecipeActions.ADD_INGREDIENT,
      handleRemoveIngredient: RecipeActions.REMOVE_INGREDIENT,
      handleUpdateIngredient: RecipeActions.UPDATE_INGREDIENT,
    });

  }

  handleLoadRecipe(recipe) {
    this.setState({recipe});
  }

  handleUpdateRecipe({key, value}) {
    this.setState({recipe: assign({}, this.recipe, {[key]: value})});
  }

  handleSubmitRecipe() {
    RecipeSource.create(assign({}, this.recipe, {ingredients: flow(
      values,
      stripIds,
      stripEmptyIngredients,
    )(this.ingredients)}));
  }

  handleSubmitSuccess() {
    history.push('/recipes');
  }

  handleSubmitFailure(err) {
    this.setState({err});
  }

  handleAddIngredient() {
    const withId = createIngredient();
    this.setState({ingredients: set(withId._id, withId)(this.ingredients)});
  }

  handleRemoveIngredient(ingredientId) {
    this.setState({ingredients: unset(ingredientId)(this.ingredients)});
  }

  handleUpdateIngredient({ingredientId, key, value}) {
    const updatedIngredient = flow(
      clone,
      set(key, value)
    )(this.ingredients[ingredientId]);
    this.setState({ingredients: set(ingredientId, updatedIngredient)(this.ingredients)});
  }
}

export default alt.createStore(RecipeStore, 'RecipeStore');
