import flow from 'lodash/fp/flow';
import clone from 'lodash/clone';
import values from 'lodash/values';
import assign from 'lodash/assign';
import set from 'lodash/fp/set';
import unset from 'lodash/fp/unset'
import alt from 'alt-instance';

import GroceryListActions from 'actions/GroceryListActions'
import GroceryListSource from 'sources/GroceryListSource'

class GroceryListStore {
  static config = {
    getState(currentState) {
      return assign({}, currentState, {lists: values(currentState.lists)});
    }
  };

  constructor() {
    this.lists = {};
    this.err = null;
    this.loading = false;

    this.bindListeners({
      handleFetchLists: GroceryListActions.FETCH_LISTS,
      handleFetchSuccess: GroceryListActions.FETCH_SUCCESS,
      handleFailure: [
        GroceryListActions.FETCH_FAILURE,
        GroceryListActions.CREATE_FAILURE,
        GroceryListActions.REMOVE_FAILURE,
      ],
      handleCreateSuccess: GroceryListActions.CREATE_SUCCESS,
      handleUpdateSuccess: GroceryListActions.UPDATE_SUCCESS,
      handleRemoveSuccess: GroceryListActions.REMOVE_SUCCESS,
      handleCreateList: GroceryListActions.CREATE_LIST,
      handleRemoveList: GroceryListActions.REMOVE_LIST,
      handleCreateItem: GroceryListActions.CREATE_ITEM,
      handleRemoveItem: GroceryListActions.REMOVE_ITEM,
      handleToggleItem: GroceryListActions.TOGGLE_ITEM,
    });

    this.exportPublicMethods({list: this.list.bind(this)})
  }

  list(id) {
    return this.lists[id];
  }

  handleFetchLists() {
    if (!this.loading) {
      GroceryListSource.fetch();
    }
  }

  handleFetchSuccess({entities}) {
    this.setState({lists: entities.groceryLists, err: null, loading: true});
  }

  handleCreateList(list) {
    GroceryListSource.create(list);
  }

  handleCreateSuccess({result, entities}) {
    console.log(result, entities);
    this.setState({lists: set(result, entities.groceryLists[result])(this.lists)});
  }

  handleFailure(err) {
    this.setState({err});
  }

  handleRemoveList(listId) {
    GroceryListSource.remove(listId);
  }

  handleRemoveSuccess({result}) {
    this.setState({lists: unset(result)(this.lists)});
  }

  handleUpdateList(listId, updater) {
    const newList = this._updateList(listId, updater);
    console.log(newList);
    GroceryListSource.update(listId, newList);
  }

  handleUpdateSuccess({result, entities}) {
    this.setState({lists: set(result, entities.groceryLists[result])(this.lists)})
  }

  handleCreateItem({listId, item}) {
    this.handleUpdateList(listId, list => {
      list.items = list.items.concat([item]);
      return list;
    });
  }

  handleRemoveItem({listId, itemId}) {
    this.handleUpdateList(listId, list => {
      list.items = list.items.filter(item => item._id !== itemId);
      return list;
    });
  }

  handleToggleItem({listId, itemId}) {
    this.handleUpdateList(listId, list => {
      let item = list.items.find(item => item._id === itemId);
      item.completed = !item.completed;
      return list;
    });
  }

  _updateList(listId, updater) {
    return flow(
      clone,
      updater
    )(this.list(listId));
  }
}

export default alt.createStore(GroceryListStore, 'GroceryListStore');
