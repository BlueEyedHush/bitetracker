import Immutable from 'immutable'
import ImmutableStore from 'util/decorators/ImmutableStore'

import alt from 'alt-instance'

import GroceryListActions from 'actions/GroceryListActions'
import GroceryListSource from 'sources/GroceryListSource'

const GroceryList = Immutable.Record({ _id: 0, title: '', items: Immutable.Map() });
const GroceryListItem = Immutable.Record({ _id: 0, name: '', completed: false });

class GroceryListStore {
  constructor() {
    this.err = null;
    this.lists = new Immutable.Map();

    let { FETCH_LISTS, FETCH_SUCCESS, FETCH_FAILURE, ADD_LIST, REMOVE_LIST, ADD_ITEM, REMOVE_ITEM, TOGGLE_ITEM } = GroceryListActions;

    this.bindListeners({
      handleFetchLists:   FETCH_LISTS,
      handleFetchSuccess: FETCH_SUCCESS,
      handleFetchFailed:  FETCH_FAILURE,
      handleAddList:      ADD_LIST,
      handleRemoveList:   REMOVE_LIST,
      handleAddItem:      ADD_ITEM,
      handleRemoveItem:   REMOVE_ITEM,
      handleToggleItem:   TOGGLE_ITEM
    });
  }

  _updateList(listId, prop, updater) {
    this.setState({ lists: this.lists.updateIn([listId, prop], updater) });
  }

  _updateItem(listId, itemId, prop, updater) {
    this.setState({ lists: this.lists.updateIn([listId, 'items', itemId, prop], updater) });
  }

  handleFetchLists() {
    GroceryListSource
        .fetch()
        .then(GroceryListActions.fetchSuccess)
        .catch(GroceryListActions.fetchFailure);
  }

  handleFetchSuccess(lists) {
    // Convert list to a map with object ids as keys
    lists.forEach(list =>
        list.items = Immutable.Map(list.items.map(item => [item._id, new GroceryListItem(item)])));
    lists = Immutable.Map(lists.map(list => [list._id, new GroceryList(list)]));
    this.setState({ lists, err: null });
  }

  handleFetchFailed(err) {
    this.setState({ err });
  }

  handleAddList(list) {
    this.setState({ lists: this.lists.set(list._id, new GroceryList(list)) });
  }

  handleRemoveList(listId) {
    this.setState({ lists: this.lists.delete(listId) });
  }

  handleAddItem({ listId, item }) {
    this._updateList(listId, 'items', items => items.set(item._id, new GroceryListItem(item)));
  }

  handleRemoveItem({ listId, itemId }) {
    this._updateList(listId, 'items', items => items.delete(itemId));
  }

  handleToggleItem({ listId, itemId }) {
    this._updateItem(listId, itemId, 'completed', completed => !completed);
  }
}

GroceryListStore.config = {
  getState(currentState) {
    let state = {
      err: currentState.err
    };
    state.lists = currentState.lists.toList().map(list => list.update('items', items => items.toList()));
    return state;
  }
};

export default alt.createStore(ImmutableStore(GroceryListStore), 'GroceryListStore');