import flow from 'lodash/fp/flow'
import clone from 'lodash/clone'
import alt from 'alt-instance'

import GroceryListActions from 'actions/GroceryListActions'
import GroceryListSource from 'sources/GroceryListSource'

class GroceryListStore {
  constructor() {
    this.lists = [];
    this.err = null;

    this.bindListeners({
      handleFetchLists: GroceryListActions.FETCH_LISTS,
      handleFetchSuccess: GroceryListActions.FETCH_SUCCESS,
      handleFailure: [
        GroceryListActions.FETCH_FAILURE,
        GroceryListActions.CREATE_FAILURE,
        GroceryListActions.REMOVE_FAILURE,
      ],
      handleUpdateSuccess: GroceryListActions.UPDATE_SUCCESS,
      handleCreateList: GroceryListActions.CREATE_LIST,
      handleRemoveList: GroceryListActions.REMOVE_LIST,
      handleCreateItem: GroceryListActions.CREATE_ITEM,
      handleRemoveItem: GroceryListActions.REMOVE_ITEM,
      handleToggleItem: GroceryListActions.TOGGLE_ITEM,
    });
    this.registerAsync(GroceryListSource);
  }

  handleFetchLists() {
    if (!this.getInstance().isLoading()) {
      this.getInstance().fetch();
    }
  }

  handleFetchSuccess({ data }) {
    this.setState({lists: data, err: null});
  }

  handleCreateList(list) {
    this.getInstance().create(list);
  }

  handleCreateSuccess(list) {
    this.setState({lists: this.lists.concat([list])});
  }

  handleFailure(err) {
    this.setState({err});
  }

  handleRemoveList(listId) {
    this.getInstance().remove(listId);
  }

  handleRemoveSuccess(list) {
    const index = this._listIndex(list._id);
    this.setState({
      lists: [
        ...this.lists.slice(0, index),
        ...this.lists.slice(index + 1)
      ]
    });
  }

  handleUpdateList(listId, updater) {
    const newList = this._updateList(listId, updater);
    this.getInstance().update(listId, newList);
  }

  handleUpdateSuccess({ data }) {
    const index = this._listIndex(data._id);
    this.setState({
      lists: [
        ...this.lists.slice(0, index),
        data,
        ...this.lists.slice(index + 1)
      ]
    })
  }

  handleCreateItem({listId, item}) {
    this.handleUpdateList(listId, list => {
      list.items = list.items.concat([item]);
      return list;
    });
  }

  handleRemoveItem({listId, itemId}) {
    this.handleUpdateList(listId, list => {
      list.items = list.items.filter(item => item._id !== itemId);
      return list;
    });
  }

  handleToggleItem({listId, itemId}) {
    this.handleUpdateList(listId, list => {
      let item = list.items.find(item => item._id === itemId);
      item.completed = !item.completed;
      return list;
    });
  }

  _listIndex(id) {
    return this.lists.findIndex(list => list._id === id);
  }

  _list(listId) {
    return this.lists.find(list => list._id === listId);
  }

  _updateList(listId, updater) {
    return flow(
      clone,
      updater
    )(this._list(listId));
  }
}

export default alt.createStore(GroceryListStore, 'GroceryListStore');
