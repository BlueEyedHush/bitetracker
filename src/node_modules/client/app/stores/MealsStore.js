import alt from 'client/app/alt';
import moment from 'moment';

import MealsActions from 'client/app/actions/MealsActions';
import MealsSource from 'client/app/sources/MealsSource';

/**
 * Stores meals for given date (initically current date is used).
 * Synchronization with server can be performed with fetchMeals action. It triggers state change.
 * Date can be altered using changeDate action. Changing date doesn't trigger state change, but it
 * it automatically triggers resynchronization, which in turn trigger state change.
 */
class MealsStore {
  constructor() {
    this.date = moment();
    this.meals = [];

    this.bindListeners({
      handleFetch: MealsActions.FETCH_MEALS,
      handleFetchSucceess: MealsActions.FETCH_MEALS_SUCCESS,
      handleAdd: MealsActions.ADD_MEAL,
      handleAddSuccess: MealsActions.ADD_MEAL_SUCCESS,
      handleChangeDate: MealsActions.CHANGE_DATE
    });
  }

  handleFetch() {
    MealsSource.fetch(this.date);
  }

  handleFetchSucceess(mealsList) {
    const todaysOnly = mealsList.filter(ml => this.date.isSame(ml.date, 'day'));
    this.setState({meals: todaysOnly});
  }

  handleAdd({date, name, ndbno}) {
    MealsSource.create(date, name, ndbno);
  }

  handleAddSuccess(addedMeal) {
    const modifiedMealsList = this.meals.concat([addedMeal]);
    this.setState({meals: modifiedMealsList});
  }

  handleChangeDate(newDate) {
    this.date = newDate;
    MealsActions.fetchMeals.defer();
  }
}

export default alt.createStore(MealsStore, 'MealsStore');
