import moment from 'moment';
import alt from 'alt-instance';

import PlannerActions from 'actions/PlannerActions';
import PlannerSource from 'sources/PlannerSource';
import GroceryListSource from 'sources/GroceryListSource';


class PlannerStore {
  constructor() {
    this.date = moment().startOf('day');
    this.planner = [];

    this.bindListeners({
      handleFetchPlanner: PlannerActions.FETCH_PLANNER,
      handleChangeDate: PlannerActions.CHANGE_DATE,
      handleAddRecipe: PlannerActions.ADD_RECIPE,
      handleGenerateGroceries: PlannerActions.GENERATE_GROCERIES,
    });
  }

  handleFetchPlanner() {
    PlannerSource.fetch(this.date.format('YYYY-MM-DD'))
      .then(({data}) => {
        this.setState({planner: data});
      });
  }

  handleChangeDate(date) {
    this.setState({date});
    PlannerActions.fetchPlanner.defer();
  }

  handleAddRecipe({recipe, date, meal}) {
    PlannerSource.addEntry(date, {meal, recipe: recipe._id})
      .then(({data}) => {
        const date = moment(data.date).startOf('day');
        const index = this.planner.findIndex(plan => moment(plan.date).startOf('day').isSame(date));
        this.setState({planner: [...this.planner.slice(0, index), data, ...this.planner.slice(index + 1)]});
      });
  }

  handleGenerateGroceries(entry) {
    console.log(entry.recipe.ingredients);
    var ingredients = entry.recipe.ingredients.map( (i) => {
      return {
        name: i.name,
        completed: false
      }
    })
    console.log(ingredients);
    GroceryListSource.create({
      title: entry.meal + ": " + entry.recipe.title,
      items: ingredients
    });
  }
}

export default alt.createStore(PlannerStore, 'PlannerStore');
