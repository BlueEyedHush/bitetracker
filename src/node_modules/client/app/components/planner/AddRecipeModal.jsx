import React, {PropTypes} from 'react';
import ReactDOM from 'react-dom';
import {Button, Modal, FormGroup, FormControl, ControlLabel} from 'react-bootstrap';
import DatePicker from 'react-bootstrap-date-picker';
import Recipe from 'schemas/RecipeSchema';
import {mealTypes} from 'schemas/PlannerEntrySchema';
import {instanceOfMoment} from 'proptypes/moment';

import './add-recipe-modal.scss';

import RecipeView from '../recipes/recipe/RecipeView';
import RecipeSearch from './RecipeSearch';
import RecipeResults from './RecipeResults';

class AddRecipeModal extends React.Component {
  render() {
    const {open, onClose, date, meal, recipe, onRecipeAdd, onRecipeSet, recipes} = this.props;
    return (
      <Modal show={open} onHide={onClose} className="c__add-recipe-modal">
        <Modal.Header closeButton>
          <Modal.Title>Add Recipe to Planner</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <DatePicker ref={ref => this.datepicker = ref}
                      value={date ? date.format() : undefined} />
          <FormGroup controlId="formControlsSelect">
            <ControlLabel>Select meal</ControlLabel>
            <FormControl componentClass="select" placeholder="select"
                         ref={ref => this.meal = ref}
                         defaultValue={meal || mealTypes[0]}>
              {mealTypes.map(type => (
                <option value={type} key={type}>{type}</option>
              ))}
            </FormControl>
          </FormGroup>
          {recipe ? (
            <RecipeView recipe={recipe} />
          ) : (
            <div>
              <RecipeSearch />
              {recipes ? <RecipeResults recipes={recipes} onRecipeSet={onRecipeSet} /> : null}
            </div>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button bsStyle="primary" onClick={() => {
            onRecipeAdd(recipe, this.datepicker.getValue(), ReactDOM.findDOMNode(this.meal).value);
            onClose();
          }}>Add Recipe</Button>
        </Modal.Footer>
      </Modal>
    );
  }
}

AddRecipeModal.propTypes = {
  open: PropTypes.bool,
  onShow: PropTypes.func,
  onClose: PropTypes.func,
  date: instanceOfMoment,
  meal: PropTypes.string,
  recipe: Recipe,
  onRecipeAdd: PropTypes.func,
  onRecipeSet: PropTypes.func,
  recipes: PropTypes.arrayOf(Recipe),
  trigger: PropTypes.node
};

AddRecipeModal.defaultProps = {
  onRecipeAdd: () => {
  },
  onClose: () => {
  },
};

export default AddRecipeModal;
