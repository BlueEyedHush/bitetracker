import flow from 'lodash/fp/flow';
import values from 'lodash/fp/values';
import some from 'lodash/fp/some';
import every from 'lodash/fp/every';
import omit from 'lodash/fp/omit';
import React, {PropTypes} from 'react';
import RecipeActions from 'actions/RecipeActions';
import Ingredient from 'schemas/IngredientSchema';

import IngredientList from './IngredientList';

const nonEmptyIngredient = (ingredient) => flow(
  omit('_id'),
  values,
  some(value => value),
)(ingredient);

const allNonEmptyIngredients = (ingredients) =>
ingredients.length === 0 || every(nonEmptyIngredient)(ingredients);

class IngredientListContainer extends React.Component {
  componentDidMount() {
    if (allNonEmptyIngredients(this.props.ingredients)) {
      RecipeActions.addIngredient.defer();
    }
  }

  componentWillReceiveProps(nextProps) {
    if (allNonEmptyIngredients(nextProps.ingredients)) {
      RecipeActions.addIngredient();
    }
  }

  render() {
    const {ingredients} = this.props;
    return (
      <IngredientList ingredients={ingredients}
                      onChange={(ingredientId, key, value) =>
                        RecipeActions.updateIngredient(ingredientId, key, value)}
                      onDelete={(ingredientId) =>
                        RecipeActions.removeIngredient(ingredientId)} />
    );
  }
}

IngredientListContainer.propTypes = {
  ingredients: PropTypes.arrayOf(Ingredient).isRequired
};

export default IngredientListContainer;
