import {normalize} from 'normalizr';

const async = ({request, success, error, normalized}) => (...args) => {
  const promise = request(...args);
  if (typeof promise.then !== 'undefined') {
    return promise
      .then(response => success(normalize(response.data || response, normalized)))
      .catch(error);
  } else {
    return new Promise((resolve, reject) => {
      promise((err, response) => {
        if (err) {
          return error(err) && reject(err);
        }
        const data = normalize(response.data || response, normalized);
        return success(data) && resolve(data);
      });
    });
  }
};

export default function createAsync(actions) {
  const source = {};
  Object.keys(actions)
    .forEach(key => {
      source[key] = async(actions[key]);
    });
  return source;
}
