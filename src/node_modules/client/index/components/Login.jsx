import React from 'react';
import FormGroup from 'react-bootstrap/lib/FormGroup';
import FormControl from 'react-bootstrap/lib/FormControl';
import Button from 'react-bootstrap/lib/Button';
import Alert from 'react-bootstrap/lib/Alert';
import {redirect} from 'client/sharedjs/redir';
import * as authSrv from 'client/sharedjs/auth';
import './Login.scss';

const NOERROR = 'NOERROR';

const S_INCORRECT_CREDS = 'Username or password is incorrect!';
const S_UNKNOWN_ERROR = 'Unknown error occured. Please refresh the page and try again.';

const LoginErrorAlert = React.createClass({
  propTypes: {
    errorType: React.PropTypes.string.isRequired,
  },
  render() {
    if (this.props.errorType === 'INCORRECT_CREDENTIALS') {
      return (<Alert bsStyle="danger">{S_INCORRECT_CREDS}</Alert>);
    } else if (this.props.errorType === 'UNKNOWN') {
      return (<Alert bsStyle="danger">{S_UNKNOWN_ERROR}</Alert>);
    } else {
      return null;
    }
  },
});

const Login = React.createClass({
  propTypes: {
    authService: React.PropTypes.object.isRequired,
  },

  getInitialState() {
    return {
      username: '',
      password: '',
      status: NOERROR,
    };
  },

  usernameChanged(e) {
    this.setState({username: e.target.value});
  },

  passwordChanged(e) {
    this.setState({password: e.target.value});
  },

  submit(_) {
    this.props.authService.login(this.state.username, this.state.password)
      .then((json) => {
        redirect(json.redirectUrl);
        /* usually this won't execute, but I add this for completness */
        this.setState({status: NOERROR});
      })
      .catch((reason) => {
        this.setState({status: reason.name});
      });
  },

  render() {
    return (
      <div className="tile smallMargin">
        <h2 className="headerText smallMargin">Login to BiteTracker</h2>

        <FormGroup className="centerText">
          <LoginErrorAlert errorType={this.state.status} />
          <FormControl
            id="usernameForm"
            className="inputbox centerText"
            type="text"
            value={this.state.username}
            placeholder="Username"
            onChange={this.usernameChanged}
          />
          <FormControl
            id="passwordForm"
            className="inputbox centerText"
            type="password"
            value={this.state.password}
            placeholder="Password"
            onChange={this.passwordChanged}
          />
          <p className="normalText centerText">Forgot password?</p>
          <Button id="submitButton" className="inputButton" bsStyle="primary" onClick={this.submit}>Log in</Button>
        </FormGroup>
      </div>
    );
  },
});

const AboutBitetracker = () => (
  <div className="wideTile bigMargin">
    <h2 className="hugeText">BiteTracker</h2>
    <h2 className="mediumText">BiteTracker is an application allowing you to track your diet.<br />
      Log all eaten meals, view statistics of absorbed calories.<br />
      Don't have an idea what you want to eat?<br />
      Use generate function to view suggested meals for your diet!
      <br />
      <br />
    </h2>
  </div>
);

const MembershipBenefits = () => (
  <div className="tile smallMargin">
    <h2 className="headerText smallMargin">Benefits of being logged in:</h2>

    <li className="normalText centerText">Shopping list generation</li>
    <li className="normalText centerText">Ability to comment on recipies</li>
    <li className="normalText centerText">Tracking the amount of calories of eaten meals</li>
    <li className="normalText centerText">Generate personal meal schedule</li>
  </div>
);

const Features = () => (
  <div>
    <div className="wideTile bigMargin">
      <div className="headerText">Application features</div>
    </div>
    <div className="wideTile white">
      <div className="threeTile">
        <h2 className="headerText smallMargin">Recipes</h2>
        <p className="normalText">
          Add, browse, comment and like recipies!
          You can go search through the recipes added by BiteTracker community.
          It's really simple to find new ideas of meals you can prepare!
          Like the recipe if it suits you, and post comments with your feedback on the recipe!
        </p>
      </div>
      <div className="threeTile">
        <h2 className="headerText smallMargin">Meal Planner</h2>
        <p className="normalText">
          Specify what diet you have and we will generate a plan of meals you should eat
          in order to fill your diet! Our meal planner will suggest diversified meals
          that suits your diet. You can refuse some meals and we will provide ideas for
          their replacements.
        </p>
      </div>
      <div className="threeTile">
        <h2 className="headerText smallMargin">Food log</h2>
        <p className="normalText">
          BiteTracker is the easiest way to track the meals you have eaten.
          With few steps you can add meals to your log. Whenever you want you can
          view statistics of calories you have absorbed.
        </p>
      </div>
    </div>
  </div>
);

/* LoginView - main component */
export default () => (
  <div className="wrapper">
    <AboutBitetracker />

    <div className="wideTile white">
      <Login authService={authSrv} />
      <MembershipBenefits />
    </div>

    <Features />
  </div>
);
